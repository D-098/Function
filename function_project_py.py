# -*- coding: utf-8 -*-
"""Function project.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1c0PLO2RVvkasmdF-TQkPSuoAi-1TWZ5H

**What is the difference between a function and a method in Python?**
= A function is a standalone block of a code defined using def, while a method is a function  associated with an object and called as inctsnce of a class .
methid are defined  inside classesed  can access the instance (self) and class (cls) data.

**2. Explain the concept of function arguments and parameters in Python.**
= In python, parameters are the variabnle listed in a function defenication while arguments are the actual values passed to the sunction calling it

**3.What are the different ways to define and call a function in Python ?**
= In Python, there are several ways to define and call functions, each useful in different scenarios. Let's go through the most common methods:
1.Standard Function Definition - Functions are typically defined using the def keyword, followed by a name, parameters, and a body.

2.Function with Default Parameters - You can set default values for parameters. If no argument is passed, the function uses the default values.

3.Lambda (Anonymous) Functions

A lambda function is a single-line, anonymous function defined with the lambda keyword, mainly used for short, simple operations.

**4. What is the purpose of the `return` statement in a Python function?**
= The return statement in a Python function is used to send a value (or multiple values) back to the caller of the function. It marks the end of the function's execution and specifies the result that the function should output.

**5. What are iterators in Python and how do they differ from iterables?**
= An iterable is any Python object that can be looped over (iterated). It contains elements that can be accessed one by one using a loop.
An iterator is an object that remembers its state during iteration and produces elements one at a time using the __next__() method. It does not store all elements in memory at once, making it memory-efficient.

**6. Explain the concept of generators in Python and how they are defined**
= A generator in Python is a special type of iterator that allows you to iterate through values lazily, meaning it generates values on the fly instead of storing them in memory. This makes generators memory-efficient and useful for handling large data sets.
Generators are defined using a function with the yield keyword instead of return.

**7. What are the advantages of using generators over regular functions?**
= Generators provide several benefits over regular functions, especially in terms of performance and memory efficiency.

**8. What is a lambda function in Python and when is it typically used?**
= A lambda function in Python is a small, anonymous function that is defined using the lambda keyword. It can have multiple arguments but only one expression, which is evaluated and returned.
Lambda functions are useful when:

1. You need a simple function for a short period (e.g., inside another function).
2. You want to avoid defining a separate named function for simple operations.
3. You need a quick function inside higher-order functions (like map(), filter(), or sorted()).

**9. Explain the purpose and usage of the `map()` function in Python**
= The map() function is used to apply a given function to every item in an iterable (e.g., list, tuple) without using a loop. It returns a map object (an iterator) containing the transformed elements.

**10. What is the difference between `map()`, `reduce()`, and `filter()` functions in Python?**
= The map() function applies a given function to each element of an iterable and returns a new iterable with transformed elements.
The filter() function applies a function that returns True or False to each element and keeps only the elements that return True.
The reduce() function cumulatively applies a function to elements in an iterable, reducing it to a single result.
"""

**11. Using pen & Paper write the internal mechanism for sum operation using  reduce function on this given
list:[47,11,42,13]; **
= The reduce() function applies a binary function cumulatively to the -
elements of an iterable, reducing it to a single result. Step-by-Step Internal Mechanism for reduce() on [47, 11, 42, 13] Code Representation:
from functools import reduce

nums = [47, 11, 42, 13]
result = reduce(lambda x, y: x + y, nums)
print(result)  # Output: 113


Internal Execution on Paper:
Step 1: Take the first two elements → 47 + 11 = 58
Step 2: Take the result and the next element → 58 + 42 = 100
Step 3: Take the result and the last element → 100 + 13 = 113 Final Output: 113
Step	x	y	Result (x + y)
1	47	11	58
2	58	42	100
3	100	13	113
Thus, reduce(lambda x, y: x + y, [47, 11, 42, 13]) sums up the list step-by-step, returning 113 as the final result.

"""#**Pratical question**"""

#1.Write a Python function that takes a list of numbers as input and returns the sum of all even numbers in the list.

def sum_of_evens(numbers):
    return sum(num for num in numbers if num % 2 == 0)

# Example usage:
nums = [1, 2, 3, 4, 5, 6]
print(sum_of_evens(nums))  # Output: 12 (2 + 4 + 6)

#2.Create a Python function that accepts a string and returns the reverse of that string.

def reverse_string(s):
    return s[::-1]  # Uses slicing to reverse the string

# Example usage:
text = "hello"
print(reverse_string(text))  # Output: "olleh"

#3.Implement a Python function that takes a list of integers and returns a new list containing the squares of each number.
#Here's a Python function to square each number in a list:
def square_numbers(lst):
    """Returns a new list with the squares of each number in the given list."""
    return [x ** 2 for x in lst]

# Example Usage
numbers = [1, 2, 3, 4, 5]
squared_numbers = square_numbers(numbers)
print(squared_numbers)  # Output: [1, 4, 9, 16, 25]

# Example Usage
numbers = [1, 2, 3, 4, 5]
squared_numbers = square_numbers(numbers)
print(squared_numbers)  # Output: [1, 4, 9, 16, 25]

#4.Write a Python function that checks if a given number is prime or not from 1 to 200.

def is_prime(n):
    if n < 2:
        return False  # 0 and 1 are not prime numbers
    for i in range(2, int(n ** 0.5) + 1):  # Check divisibility up to sqrt(n)
        if n % i == 0:
            return False
    return True

# Check prime numbers from 1 to 200
primes = [num for num in range(1, 201) if is_prime(num)]
print(primes)

#5. Create an iterator class in Python that generates the Fibonacci sequence up to a specified number of terms.

class FibonacciIterator:
    def __init__(self, n_terms):
        self.n_terms = n_terms  # Number of terms to generate
        self.a, self.b = 0, 1   # Initial Fibonacci numbers
        self.count = 0          # Counter to track the number of terms

    def __iter__(self):
        return self  # Returns the iterator object

    def __next__(self):
        if self.count >= self.n_terms:
            raise StopIteration  # Stops iteration when limit is reached

        fib_num = self.a
        self.a, self.b = self.b, self.a + self.b  # Update Fibonacci numbers
        self.count += 1
        return fib_num  # Return the current Fibonacci number

# Example usage:
fib_iter = FibonacciIterator(10)  # Generate first 10 Fibonacci numbers
for num in fib_iter:
    print(num, end=" ")  # Output: 0 1 1 2 3 5 8 13 21 34

#6.Write a generator function in Python that yields the powers of 2 up to a given exponent.

def powers_of_two(max_exponent):
    for exponent in range(max_exponent + 1):
        yield 2 ** exponent  # Generate powers of 2

# Example usage:
for power in powers_of_two(5):
    print(power, end=" ")  # Output: 1 2 4 8 16 32

#7.Implement a generator function that reads a file line by line and yields each line as a string .
def read_file_line_by_line(file_path):
    """Generator function to read a file line by line."""
    with open(file_path, 'r') as file:
        for line in file:
            yield line.strip()  # Remove trailing newline characters
        for line in file:
            yield line.strip()  # Remove trailing newline characters

#8.Use a lambda function in Python to sort a list of tuples based on the second element of each tuple.

# Sample list of tuples
tuples_list = [(1, 3), (4, 1), (2, 5), (3, 2)]

# Sorting based on the second element of each tuple
sorted_list = sorted(tuples_list, key=lambda x: x[1])

print(sorted_list)  # Output: [(4, 1), (3, 2), (1, 3), (2, 5)]

# For in-place sorting, use list.sort():

tuples_list.sort(key=lambda x: x[1])
print(tuples_list)  # Output: [(4, 1), (3, 2), (1, 3), (2, 5)]

#9. Write a Python program that uses map() to convert a list of temperatures from Celsius to Fahrenheit.

# Function to convert Celsius to Fahrenheit
def celsius_to_fahrenheit(c):
    return (c * 9/5) + 32

# List of temperatures in Celsius
celsius_temps = [0, 20, 37, 100]

# Convert to Fahrenheit using map()
fahrenheit_temps = list(map(celsius_to_fahrenheit, celsius_temps))

print(fahrenheit_temps)  # Output: [32.0, 68.0, 98.6, 212.0]

#Alternative using Lambda:

fahrenheit_temps = list(map(lambda c: (c * 9/5) + 32, celsius_temps))
print(fahrenheit_temps)  # Output: [32.0, 68.0, 98.6, 212.0]

#10.Create a Python program that uses filter() to remove all the vowels from a given string.

def remove_vowels(s):
    vowels = "aeiouAEIOU"
    return "".join(filter(lambda char: char not in vowels, s))

# Example usage:
text = "Hello, World!"
result = remove_vowels(text)
print(result)  # Output: "Hll, Wrld!"

#11.Imagine an accounting routine used in a book shop. It works on a list with sublists, which look like this: Write a Python program, which returns a list with 2-tuples. Each tuple consists of the order number and the product of the price per item and the quantity. The product should be increased by 10,- € if the value of the order is smaller than 100,00 €.

def calculate_order_totals(orders):
    result = []
    for order in orders:
        order_number, quantity, price_per_item = order
        total = quantity * price_per_item
        if total < 100:
            total += 10  # Add 10€ surcharge if the total is less than 100€
        result.append((order_number, total))
    return result

# Example order list: [order_number, quantity, price_per_item]
orders = [
    [34587, 4, 40.95],
    [98762, 5, 22.95],
    [77226, 2, 18.99],
    [88112, 3, 17.99]
]

# Process orders
order_totals = calculate_order_totals(orders)

# Output result
print(order_totals)
# Expected Output: [(34587, 163.8), (98762, 124.75), (77226, 47.98), (88112, 63.97)]

#11b. Write a Python program using lambda and map.


orders = [
    [34587, 4, 40.95],
    [98762, 5, 22.95],
    [77226, 2, 18.99],
    [88112, 3, 17.99]
]

# Using map() and lambda to process orders
order_totals = list(map(lambda order:
    (order[0], order[1] * order[2] + (10 if order[1] * order[2] < 100 else 0)), orders))

print(order_totals)
# Expected Output: [(34587, 163.8), (98762, 124.75), (77226, 47.98), (88112, 63.97)]